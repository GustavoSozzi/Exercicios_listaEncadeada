#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _pessoa{
    int rga;
    char nome[50];
    struct _pessoa *next;
} Pessoa;

Pessoa *novaPessoa(char *nome,int rga)
{
    Pessoa *nova = malloc(sizeof(Pessoa));
    strcpy(nova->nome,nome);
    nova->rga=rga;
    nova->next = NULL;
    return nova;
}

void inserirLista(Pessoa **lista,Pessoa *nova)
{
    Pessoa *aux=NULL;

    if (*lista==NULL)
    {
        *lista=nova;
    }
    else
    {
        for (aux = *lista;aux->next!=NULL;aux=aux->next){}
        aux->next=nova;
    }
}

Pessoa *removerLista(Pessoa **lista,int rga)
{
    Pessoa *aux=NULL,*ant=NULL;
    if (*lista!=NULL)
    {
        for (aux = *lista;aux!=NULL && aux->rga!=rga;ant=aux,aux=aux->next){}
        if (aux!=NULL && aux->rga==rga)
        {
            if (aux==*lista)
            {
                *lista = aux->next;
            }
            else
            {
                ant->next = aux->next;
            }
        }
        else
        {
            aux = NULL;
        }
    }
    return aux;
}

void print(Pessoa *lista)
{
    Pessoa *aux=lista;
    printf("\n*****Lista*****\n\n");
    while (aux!=NULL)
    {
        printf("Nome: %s - RGA: %i\n",aux->nome,aux->rga);
        aux = aux->next;
    }
}

void liberarLista(Pessoa *lista)
{
    if (lista!=NULL)
    {
        liberarLista(lista->next);
        free(lista);
    }
}

int main()
{
    Pessoa *lista = NULL;
    Pessoa *nova = NULL;
    int rga;
    char nome[50];

    printf("Digite o RGA (-1 para sair): ");
    scanf("%i",&rga);
    while (rga!=-1)
    {
        printf("Digite o nome do aluno: ");
        scanf("\n%[^\n]s",nome);
        nova = novaPessoa(nome,rga);
        inserirLista(&lista,nova);
        printf("Digite o RGA (-1 para sair): ");
        scanf("\n%i",&rga);
    }
    print(lista);
    printf("Digite o RGA (-1 para sair): ");
    scanf("%i",&rga);
    while (rga!=-1)
    {
        Pessoa *rem = removerLista(&lista,rga);
        if (rem!=NULL)
        {
            free(rem);
        }
        print(lista);
        printf("Digite o RGA (-1 para sair): ");
        scanf("\n%i",&rga);
    }
    liberarLista(lista);
    return 0;
}


#include <stdio.h>
#include <stdlib.h>

struct Node{
 int num;
 struct Node *prox;
}; 
typedef struct Node node;

void inicia(node *LISTA);
int menu(void);
void opcao(node *LISTA, int op);
node *criaNo();
void insereFim(node *LISTA);
void insereInicio(node *LISTA);
void exibe(node *LISTA);
void libera(node *LISTA);


int main(void)
{
 node *LISTA = (node *) malloc(sizeof(node));
 if(!LISTA){
  printf("Sem memoria disponivel!\n");
  exit(1);
 }
 inicia(LISTA);
 int opt;
 
 do{
  opt=menu();
  opcao(LISTA,opt);
 }while(opt);

 free(LISTA);
 return 0;
}

void inicia(node *LISTA)
{
 LISTA->prox = NULL;
}

int menu(void)
{
 int opt;
 
 printf("Escolha a opcao\n");
 printf("0. Sair\n");
 printf("1. Exibir lista\n");
 printf("2. Adicionar node no inicio\n");
 printf("3. Adicionar node no final\n");
 printf("4. Zerar lista\n");
 printf("Opcao: "); scanf("%d", &opt);
 
 return opt;
}

void opcao(node *LISTA, int op)
{
 switch(op){
  case 0:
   libera(LISTA);
   break;
   
  case 1:
   exibe(LISTA);
   break;
  
  case 2:
   insereInicio(LISTA);
   break;
  
  case 3:
   insereFim(LISTA);
   break;  
   
  case 4:
   inicia(LISTA);
   break;
  
  default:
   printf("Comando invalido\n\n");
 }
}

int vazia(node *LISTA)
{
 if(LISTA->prox == NULL)
  return 1;
 else
  return 0;
}


void insereFim(node *LISTA)
{
 node *novo=(node *) malloc(sizeof(node));
 if(!novo){
  printf("Sem memoria disponivel!\n");
  exit(1);
 }
 printf("Novo elemento: "); scanf("%d", &novo->num);
 novo->prox = NULL;
 
 if(vazia(LISTA))
  LISTA->prox=novo;
 else{
  node *tmp = LISTA->prox;
  
  while(tmp->prox != NULL)
   tmp = tmp->prox;
  
  tmp->prox = novo;
 }
}

void insereInicio(node *LISTA)
{
 node *novo=(node *) malloc(sizeof(node));
 if(!novo){
  printf("Sem memoria disponivel!\n");
  exit(1);
 }
 printf("Novo elemento: "); scanf("%d", &novo->num);
 
 node *oldHead = LISTA->prox;
 
 LISTA->prox = novo;
 novo->prox = oldHead;
}

void exibe(node *LISTA)
{
 if(vazia(LISTA)){
  printf("Lista vazia!\n\n");
  return ;
 }
 
 node *tmp;
 tmp = LISTA->prox;
 
 while( tmp != NULL){
  printf("%5d", tmp->num);
  tmp = tmp->prox;
 }
 printf("\n\n");
}

void libera(node *LISTA)
{
 if(!vazia(LISTA)){
  node *proxNode,
     *atual;
  
  atual = LISTA->prox;
  while(atual != NULL){
   proxNode = atual->prox;
   free(atual);
   atual = proxNode;
  }
 }
}
